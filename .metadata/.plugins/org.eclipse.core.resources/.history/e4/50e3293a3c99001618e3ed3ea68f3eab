package com.gafur.homework.week_3.annotations;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Tester {
	private static final Object item = null;
	private Object newObject;

	public boolean testAll(String[] classes) {

		for (String item : classes) {
			Method[] methods = item.getClass().getDeclaredMethods();
			Class currentClass = item.getClass();
			try {
				Object newObject = currentClass.getConstructor(null);
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			}
			// Object object = new getClass(item);

			for (Method value : methods) {
				 try {
					value.invoke(newObject, 15);
					System.out.println(value.invoke(newObject, 15));
					System.out.println(value.invoke(newObject, 12));
					System.out.println(value.invoke(newObject, 45));
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
		return false;
	}
}
