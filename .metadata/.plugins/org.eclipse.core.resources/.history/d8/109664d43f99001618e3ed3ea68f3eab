package com.gafur.homework.week_3.annotations;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Tester {
	private Object newObject;

	public boolean testAll(String[] classes) {

		for (String item : classes) {
			Method[] methods = item.getClass().getDeclaredMethods();

			try {
				Class<?> currentClass = Class.forName(item);
				newObject = currentClass.newInstance();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}

			for (Method value : methods) {
				try {
					value.invoke(newObject, 15);
					System.out.println(value.invoke(newObject, 15));
					System.out.println(value.invoke(newObject, 12));
					System.out.println(value.invoke(newObject, 45));
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
		return false;
	}
}
